# -*- coding: utf-8 -*-
"""fastapi_app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jR-osH3n_Q3UutC-6JJlp8U5bwpmMeSj
"""

!pip install colabcode
!pip install fastapi

use_colab = True 

if use_colab:
    from google.colab import drive
    drive.mount('/content/drive')
    PATH ='/content/drive/MyDrive/'
else:
    PATH ='/data/'

import pandas as pd

data_api = pd.read_csv(PATH + 'testapi.csv')

from colabcode import ColabCode
from fastapi import FastAPI

cc = ColabCode(port=12100, code=False)

!pip install pyngrok

!ngrok authtoken 2GNZQfn8XssCVllmk333VBfLVSI_4WveFB3LZfH8UbEs3LNqE

app = FastAPI()

from fastapi import FastAPI
from pydantic import BaseModel

import pickle
import json
import requests
from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
import numpy as np
templates = Jinja2Templates(directory='templates')

app = FastAPI()

app = FastAPI(
    title="Credit Card Fraud Detection API",
    description="""An API that utilises a Machine Learning model that detects if a credit card transaction is fraudulent or not based on the following features: hours, amount, transaction type etc.""",
    version="1.0.0", debug=True)


with open(PATH + "lgbm.pkl", "rb") as f:
    model = pickle.load(f)

async def running():
  note = """
Credit Card Fraud Detection API üôåüèª
Note: add "/docs" to the URL to get the Swagger UI Docs or "/redoc"
  """
  return note


																	
class fraudDetection(BaseModel):
    name_contract_type: int 
    children_count: int
    fam_members: int
    amt_credit_sum: float
    DAYS_INSTALMENT_delay: float
    amt_income_total: float
    credit_active: int
    bureau_year: int

@app.post('/predict')
def predict(data : fraudDetection):
                                                                                                                                                                                                                                
    features = np.array([[data.name_contract_type, data.children_count, data.fam_members, data.amt_credit_sum,
                          data.DAYS_INSTALMENT_delay, data.amt_income_total, data.credit_active, data.bureau_year]])
    

    predictions = model.predict(features)
    if predictions == 1:
        return {"The customer won't refund the loan"}
    elif predictions == 0:
        return {"The customer will refund his loan"}

cc.run_app(app=app)